/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

/* layer and key shortcuts */

#define ___ &trans
#define LB LEFT_BRACKET
#define LW LEFT_WIN
#define SC SEMICOLON
#define CO COMMA
#define PE PERIOD
#define BS BACKSPACE
#define DL DELETE

#define LE LEFT
#define RI RIGHT

#define NUM1 KP_NUMBER_1
#define NUM2 KP_NUMBER_2 
#define NUM3 KP_NUMBER_3
#define NUM4 KP_NUMBER_4
#define NUM5 KP_NUMBER_5 
#define NUM6 KP_NUMBER_6 
#define NUM7 KP_NUMBER_7 
#define NUM8 KP_NUMBER_8 
#define NUM9 KP_NUMBER_9 
#define NUM0 KP_NUMBER_0 

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define SPECIAL 1
#define NUM 2
#define BT 3

/* custom behaviors */

// control-tap-behavior
ZMK_BEHAVIOR(ct, hold-tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
)
// umlaute
ZMK_BEHAVIOR(de_ue_lctr, hold-tap,
    bindings = <&kp LEFT_CONTROL, <&de_ue>;
)
ZMK_BEHAVIOR(de_oe_lwin, hold-tap,
    bindings = <&kp LEFT_WIN>, <&de_oe>;
)
ZMK_BEHAVIOR(de_ae_lalt, hold-tap,
    bindings = <&kp LEFT_ALT>, <&de_ae>;
)

ZMK_LAYER(default_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp LC(SPACE) &ct LC(X) X   &ct LC(V) V   &ct LC(L) L   &ct LC(C) C   &ct LC(W) W       &ct LC(K) K   &ct LC(H) H   &ct LC(G) G   &ct LC(F) F   &ct LC(Q) Q   &de_eszett
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LC(LS(M)) &ct LC(U) U   &ct LC(I) I   &ct LC(A) A   &ct LC(E) E   &ct LC(O) O       &ct LC(S) S   &ct LC(N) N   &ct LC(R) R   &ct LC(T) T   &ct LC(D) D   &ct LC(Z) Z
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &de_ue_lctr   &de_oe_lwin   &de_ae_lalt   &ct LA SQT    &ct LC(P) P   &ct LC(Y) Y       &ct LC(B) B   &ct LC(M) M   &ct LC(CO) CO &kp LC(PE) PE &ct LC(J) J   &kp ESC
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    &mo SPECIAL   &kp SPACE     &ct LC(BS) BS     &ct LC(RE) RE &kp LS        &mo NUM
     //                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(special_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp LC(SPACE) &kp TILDE     &ct LC(V) V   &ct LC(L) L   &ct LC(C) C   &ct LC(W) W       &ct LC(K) K   &ct LC(H) H   &ct LC(G) G   &ct LC(F) F   &ct LC(Q) Q   &de_sz
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LC(LS(M)) &ct LC(U) U   &ct LC(I) I   &ct LC(A) A   &ct LC(E) E   &ct LC(O) O       &ct LC(S) S   &ct LC(N) N   &ct LC(R) R   &ct LC(T) T   &ct LC(D) D   &ct LC(Z) Z
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LSHIFT    &kp BACKSLASH &kp DOLLAR    &ct LA SQT    &ct LC(P) P   &ct LC(Y) Y       &ct LC(B) B   &ct LC(M) M   &ct LC(CO) CO &kp LC(PE) PE &ct LC(J) J   &kp ESC
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    ___           ___           ___               ___           ___           &mo BT
     //                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(num_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          ___           &kp PG_UP     &ct LC(BS) BS &kp UP        &ct LC(DL) DL &kp PG_DN         &kp SYSREQ    &kp NUM7      &kp NUM8      &kp NUM9      &none         &none
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ___           &kp HOME      &ct LC(LE) LE &kp DOWN      &ct LC(RI) RI &kp END           &kp LG(LS(S)) &kp NUM4      &kp NUM5      &kp NUM6      &kp RSHFT     &kp QUESTION
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ___           &kp LCTRL     &kp H         &kp J         &cp K         &kp L             &kp NUM0      &kp NUM1      &kp NUM2      &kp NUM3      &kp LALT      &kp DOLLAR
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    ___           ___           ___               ___           ___           ___
     //                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(bt_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &none         &none         &none         &none         &none         &none             &none         &none         &none         &none         &none         &none 
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &none         &none         &none         &none         &none         &none 
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &none         &none         &none         &none         &none         &none             &none         &none         &none         &none         &none         &none 
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                    ___           ___           ___               ___           ___           ___
     //                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)
